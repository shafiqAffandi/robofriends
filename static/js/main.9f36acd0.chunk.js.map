{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/Scroll.js","components/SearchBox.js","components/ErrorBoundary.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","props","name","email","username","className","alt","src","CardList","robots","cardComponent","map","user","i","key","id","Scroll","style","overflowY","border","height","children","SearchBox","searchChange","type","placeholder","onChange","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchfield","target","value","fetch","then","response","json","users","filterRobot","filter","robot","toLowerCase","includes","length","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"sMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sCCFSC,EAdF,SAACC,GAAW,IACfC,EAA0BD,EAA1BC,KAAMC,EAAoBF,EAApBE,MAAOC,EAAaH,EAAbG,SACrB,OACE,yBAAKC,UAAU,uDACb,yBAAKC,IAAI,QAAQC,IAAG,+BAA0BL,EAAO,KAAjC,cACpB,kBAAC,WAAD,KACE,4BAAKA,GACL,4BAAKE,GACL,2BAAID,MCWGK,EAlBE,SAACP,GAAW,IACnBQ,EAAWR,EAAXQ,OACFC,EAAgBD,EAAOE,KAAI,SAACC,EAAMC,GACtC,OACE,kBAAC,EAAD,CAAMC,IAAKD,EACXE,GAAIN,EAAOI,GAAGE,GACdb,KAAMO,EAAOI,GAAGX,KAChBE,SAAUK,EAAOI,GAAGT,SACpBD,MAAOM,EAAOI,GAAGV,WAGrB,OACE,6BACGO,ICNQM,EARA,SAACf,GACd,OACE,yBAAKgB,MAAO,CAAEC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UACnEnB,EAAMoB,WCUEC,EAbG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAClB,OACE,yBAAKlB,UAAU,OACb,2BACAA,UAAU,mCACVmB,KAAK,SACLC,YAAY,oBACZC,SAAUH,MCcDI,E,kDApBb,WAAY1B,GAAQ,IAAD,8BACjB,cAAMA,IACD2B,MAAQ,CACXC,UAAU,GAHK,E,8DAODC,EAAOC,GACvBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAK5B,OADqBG,KAAKJ,MAAlBC,SAER,uDACAG,KAAK/B,MAAMoB,a,GAhBea,aCiDbC,G,wDA3Cb,aAAe,IAAD,8BACZ,gBAiBFC,eAAiB,SAACC,GAChB,EAAKJ,SAAS,CAACK,YAAaD,EAAME,OAAOC,SAjBzC,EAAKZ,MAAQ,CACXnB,OAAQ,GACR6B,YAAc,IAJJ,E,gEAQO,IAAD,OAClBG,MAAM,8CACLC,MAAK,SAAAC,GACJ,OAAOA,EAASC,UAEjBF,MAAK,SAAAG,GACJ,EAAKZ,SAAS,CAACxB,OAAQoC,S,+BAQjB,IAAD,EACwBb,KAAKJ,MAA5BnB,EADD,EACCA,OAAQ6B,EADT,EACSA,YACVQ,EAAcrC,EAAOsC,QAAO,SAAAC,GAChC,OAAOA,EAAM9C,KAAK+C,cAAcC,SAASZ,EAAYW,kBAEvD,OAAQxC,EAAO0C,OAGb,yBAAK9C,UAAU,MACb,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWkB,aAAcS,KAAKI,iBAC9B,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAU3B,OAAQqC,OAP1B,wBAAIzC,UAAU,MAAd,kB,GA7Bc6B,cCAlBkB,IAASC,OAGP,kBAAC,EAAD,MACCC,SAASC,eAAe,SPwHrB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhB,MAAK,SAAAiB,GACJA,EAAaC,gBAEdC,OAAM,SAAA/B,GACLgC,QAAQhC,MAAMA,EAAMiC,a","file":"static/js/main.9f36acd0.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Fragment } from 'react';\r\n\r\nconst Card = (props) => {\r\n  const { name, email, username } = props;\r\n  return (\r\n    <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n      <img alt='robot' src={`https://robohash.org/${name + '12'}?200x200`} />\r\n      <Fragment>\r\n        <h2>{name}</h2>\r\n        <h3>{username}</h3>\r\n        <p>{email}</p>\r\n      </Fragment>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card.js';\r\n\r\nconst CardList = (props) => {\r\n  const { robots } = props;\r\n  const cardComponent = robots.map((user, i) => {\r\n    return (\r\n      <Card key={i} \r\n      id={robots[i].id} \r\n      name={robots[i].name} \r\n      username={robots[i].username} \r\n      email={robots[i].email}/>\r\n    );\r\n  })\r\n  return(\r\n    <div>\r\n      {cardComponent}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n  return(\r\n    <div style={{ overflowY: 'scroll', border: '1px solid black', height: '573px' }}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Scroll;","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n  return(\r\n    <div className='pa2'>\r\n      <input\r\n      className='pa3 ba b--green bg-lightest-blue'\r\n      type='search'\r\n      placeholder='Search RoboFriend'\r\n      onChange={searchChange} \r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchBox;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hasError: false\r\n    }\r\n  }\r\n\r\n  componentDidCatch(error, info) {\r\n    this.setState({ hasError: true})\r\n  }\r\n\r\n  render() {\r\n  const { hasError } = this.state;\r\n  return hasError ? \r\n  <h1>Ooops. That is not good</h1> :\r\n  this.props.children\r\n  }\r\n\r\n}\r\n\r\nexport default ErrorBoundary;","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport Scroll from '../components/Scroll'\r\nimport SearchBox from '../components/SearchBox';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport './App.css'\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      robots: [],\r\n      searchfield : ''\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response => {\r\n      return response.json();\r\n    })\r\n    .then(users => {\r\n      this.setState({robots: users});\r\n    })\r\n  }\r\n\r\n  onSearchChange = (event) =>  {\r\n    this.setState({searchfield: event.target.value})\r\n  }\r\n\r\n  render() {\r\n    const { robots, searchfield} = this.state\r\n    const filterRobot = robots.filter(robot => {\r\n      return robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n    })\r\n    return !robots.length ? \r\n    <h1 className='tc'>Loading...</h1> :\r\n    (\r\n      <div className='tc'>\r\n        <h1 className='f1'>RoboFriends</h1>\r\n        <SearchBox searchChange={this.onSearchChange}/>\r\n        <Scroll>\r\n          <ErrorBoundary>\r\n            <CardList robots={filterRobot}/>\r\n          </ErrorBoundary>\r\n        </Scroll>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './containers/App.js';\n\nReactDOM.render(\n  // <React.StrictMode>\n  // </React.StrictMode>,\n  <App />\n  ,document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}